@mixin animation($anim) {
  @include prefixed(animation, $anim);
}

@mixin animation-delay ($settings) {
  @include prefixed(animation-delay, $settings);
}

@mixin animation-duration ($settings) {
  @include prefixed(animation-duration, $settings);
}

@mixin animation-fill-mode ($settings) {
  @include prefixed(animation-fill-mode, $settings);
}

@mixin appearance($option) {
  @include prefixed(appearance, $option);
}

@mixin backface-visibility($visibility) {
  @include prefixed(backface-visibility, $visibility);
}

@mixin border-radius($radius) {
  @include prefixed(border-radius, $radius);
}

@mixin box-shadow($shadows...) {
  @include prefixed(box-shadow, $shadows);
}

@mixin box-sizing($sizing) {
  @include prefixed(box-sizing, $sizing);
}

@mixin clear-fix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin font-smoothing {
  #{$webkit}-font-smoothing: antialiased;
  font-smooth: auto;
}

// force scrollbar to show on mac
@mixin force-scrollbar {
  &::#{$webkit}scrollbar {
    @include appearance(none);

    background-color: transparent;
    width: .4375rem;
  }

  &::#{$webkit}scrollbar-thumb {
    @include border-radius(.25rem);
    @include box-shadow(0 0 .0625rem rgba(255, 255, 255, .5));

    background-color: rgba(0, 0, 0, .5);
  }

  &::#{$webkit}scrollbar-track {
    &:horizontal,
    &:vertical {
      background-color: transparent;
    }
  }
}

@mixin display-flex {
  @if $use-old-webkit == true {
    display: #{$webkit}box;
  }

  @if $use-webkit == true {
    display: #{$webkit}flex;
  }

  @if $use-ms == true {
    display: #{$ms}flexbox;
  }

  display: flex;
}

@mixin display-inline-flex {
  @if $use-old-webkit == true {
    display: #{$webkit}inline-box;
  }

  @if $use-webkit == true {
    display: #{$webkit}inline-flex;
  }

  @if $use-ms == true {
    display: #{$ms}inline-flexbox;
  }

  display: inline-flex;
}

@mixin filter($filter) {
  @include prefixed(filter, $filter);
}

@mixin flex($flex) {
  @if $use-old-webkit == true {
    #{$webkit}box-flex: $flex;
  }

  @if use-webkit == true {
    #{$webkit}flex: $flex;
  }

  @if use-ms == true {
    #{$ms}flex: $flex;
  }

  flex: $flex;
}

@mixin flex-direction($direction) {
  @include prefixed(flex-direction, $direction);

  @if $direction == 'column' {
    #{$webkit}box-direction: normal;
    #{$webkit}box-orient: vertical;
  }

  @if $direction == 'row' {
    #{$webkit}box-direction: normal;
    #{$webkit}box-orient: horizontal;
  }
}

@mixin float($side: left) {
  display: inline;
  float: unquote($side);
}

@mixin float-left {
  @include float(left);
}

@mixin float-right {
  @include float(right);
}

// prefix keyframes
@mixin keyframes($name) {
  @if $use-webkit == true {
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @if $use-moz == true {
    @-moz-keyframes #{$name} {
      @content;
    }
  }

  @if $use-ms == true {
    @-ms-keyframes #{$name} {
      @content;
    }
  }

  @if $use-o == true {
    @-o-keyframes #{$name} {
      @content;
    }
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin linear-gradient-bkgrnd($props...) {
  background-image: #{$webkit}linear-gradient($props);
  background-image: #{$moz}linear-gradient($props);
  background-image: #{$o}linear-gradient($props);
  background-image: linear-gradient($props);
}

@mixin opacity($value) {
  @include prefixed(opacity, $value);

  -khtml-opacity: $value;
  filter: unquote('progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($value * 100)})');
}

@mixin osx-font-smoothing($prop) {
  #{$moz}osx-font-smoothing: $prop;
}

@mixin menu-dropdown {
  position: relative;

  &::after {
    @include transition(transform .3s);

    border-left: .3125rem solid transparent;
    border-right: .3125rem solid transparent;
    border-top: .3125rem solid #fff;
    content: '';
    height: 0;
    position: absolute;
    right: 5%;
    top: calc(50% - .15625rem);
    width: 0;
  }

  &.active {
    &::after {
      @include transform(rotate(180deg));
    }
  }
}

@mixin placeholder {
  &::#{$webkit}-input-placeholder {
    @content;
  }

  &:#{$ms}-input-placeholder {
    @content;
  }

  &:#{$moz}-placeholder {
    @content;
  }

  &::placeholder {
    @content;
  }
}

@mixin position-sticky {
  position: relative;
  position: -webkit-sticky;
  position: sticky;
}

// prefix declarations
@mixin prefixed($property, $value) {
  @if $use-webkit == true {
    #{$webkit}#{$property}: #{$value};
  }

  @if $use-moz == true {
    #{$moz}#{$property}: #{$value};
  }

  @if $use-ms == true {
    #{$ms}#{$property}: #{$value};
  }

  @if $use-o == true {
    #{$o}#{$property}: #{$value};
  }

  #{$property}: #{$value};
}

@mixin radial-gradient-bkgrnd($props...) {
  background-image: #{$webkit}radial-gradient($props);
  background-image: #{$moz}radial-gradient($props);
  background-image: #{$o}radial-gradient($props);
  background-image: radial-gradient($props);
}

@mixin respond-to($media) {
  @if $media == 'tablet' {
    @media only screen and (max-width: $break-large) {
      @content;
    }
  } @else if $media == 'phone-landscape' {
    @media only screen and (max-width: $break-medium) {
      @content;
    }
  } @else if $media == 'phone-portrait' {
    @media only screen and (max-width: $break-small) {
      @content;
    }
  } @else if $media == 'phone-portrait-height' {
    @media only screen and (max-height: $break-small) {
      @content;
    }
  } @else if $media == 'phone-landscape-height' {
    @media only screen and (max-height: $break-x-small) {
      @content;
    }
  } @else {
    @media only screen and (max-width: $media) {
      @content;
    }
  }
}

@mixin transform($transform) {
  @include prefixed(transform, $transform);
}

@mixin transform-origin($origin) {
  @include prefixed(transform-origin, $origin);
}

@mixin transition($transitions...) {
  @include prefixed(transition, $transitions);
}

@mixin user-select($option) {
  @if $option == none {
    &:not(button) {
      &:not(.clickable) {
        cursor: default;
      }
    }

    button,
    &.clickable {
      cursor: pointer;
    }
  }

  @include prefixed(touch-callout, $option);
  @include prefixed(user-select, $option);
}

@mixin white-space {
  @if $use-moz == true {
    white-space: #{$moz}pre-wrap;
  }

  @if $use-old-o == true {
    white-space: -pre-wrap;
  }

  @if $use-o == true {
    white-space: -o-pre-wrap;
  }

  white-space: pre-wrap;
}